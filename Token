// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "hardhat/console.sol";

contract ShoeToken is ERC20, Ownable {
    event ShoesRedeemed(address indexed customer, string brand, uint256 price);

    mapping(string => uint256) public shoePrices;
    mapping(address => string) public customerSelectedShoes;

    string[] public shoeBrands;

    constructor(address initialOwner) ERC20("ShoeToken", "SHOE") Ownable(initialOwner) {
        // Initialize shoe prices
        shoePrices["Nike"] = 200;
        shoePrices["Adidas"] = 150;
        shoePrices["Puma"] = 120;

        // Add available shoe brands
        shoeBrands.push("Nike");
        shoeBrands.push("Adidas");
        shoeBrands.push("Puma");
    }

    function mint(address recipient, uint256 amount) public onlyOwner {
        _mint(recipient, amount);
    }

    function burnTokens(uint256 amount) public {
        require(amount > 0, "The amount to destroy must be greater than zero");
        require(balanceOf(msg.sender) >= amount, "Insufficient funds for token destruction");
        _burn(msg.sender, amount);
    }

    function redeemShoes(string memory brand) public payable {
        uint256 price = shoePrices[brand];
        require(price > 0, "Invalid shoe brand selected");
        require(balanceOf(msg.sender) >= price, "Insufficient funds for shoe redemption");
        _burn(msg.sender, price);
        customerSelectedShoes[msg.sender] = brand;
        emit ShoesRedeemed(msg.sender, brand, price);
    }

    function transferTokens(address recipient, uint256 amount) external {
        require(recipient != address(0), "Invalid recipient address provided");
        require(balanceOf(msg.sender) >= amount, "Insufficient funds for token transfer");
        _transfer(msg.sender, recipient, amount);
    }
}
